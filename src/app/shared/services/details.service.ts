import { Inject, Injectable } from '@angular/core';import { catchError, map, Observable } from 'rxjs';import { WeatherData } from '../interfaces/interfaces';import { HttpClient, HttpResponse } from '@angular/common/http';import { SearchService } from './search.service';import { ConverterService } from './converter.service';import { ErrorsService } from './errors.service';import { LocalStorageService } from './local-storage.service';@Injectable({  providedIn: 'root',})export class DetailsService {  constructor(    @Inject('BASE_URL') private baseUrl: string,    @Inject('ATOKEN') private atoken: string,    private httpClient: HttpClient,    private searchService: SearchService,    private converterService: ConverterService,    private errorService: ErrorsService,    private localStorageService: LocalStorageService  ) {}  public getDayForecast(): Observable<WeatherData> {    this.searchService.inputValue$.next('');    const location = this.searchService.currentSearchValue$.getValue();    return this.httpClient      .get<WeatherData>(        `${this.baseUrl}/v1/forecast.json?key=${this.atoken}&q=${location}&days=1`,        { observe: 'response' }      )      .pipe(        map((response: HttpResponse<any>) => {          this.localStorageService.setLocationToLS();          return {            city: response.body.location.name,            country: response.body.location.country,            cloud: response.body.current.cloud,            precip_mm: response.body.current.precip_mm,            humidity: response.body.current.humidity,            pressure: response.body.current.pressure_mb,            icon: response.body.current.condition?.icon,            alt: response.body.current.condition?.text,            temperatureC: response.body.current.temp_c,            windDirection: response.body.current.wind_dir,            speedWind: response.body.current.wind_kph,            status: response.status,            dayForecast: response.body.forecast.forecastday[0].hour,            averageWeatherData: response.body.forecast.forecastday[0].day,            astro: this.converterService.converterAstro(              response.body.forecast.forecastday[0].astro            ),          };        }),        catchError(this.errorService.handleError)      );  }}